---
version: 0.1
log:
  level: <%= p('registry.log.level') %>
  <% if_p('registry.log.formatter') do |log_formatter| %>
  formatter: <%= log_formatter %>
  <% end %>
  fields:
    <% p('registry.log.fields', {}).each do |key, value| %>
    <%= key %>: <%= value %>
    <% end %>
  <% if_p('registry.log.accesslog.disabled') do |disabled| %>
  accesslog:
    disabled: <%= disabled %>
  <% end %>
  hooks:
    <% if_p('registry.log.hooks.mail.levels',
            'registry.log.hooks.mail.from',
            'registry.log.hooks.mail.to',
            'registry.log.hooks.mail.smtp.addr') do |levels, from, to, addr| %>
    - type: mail
      disabled:
      levels: <%= levels %>
      options:
        from: <%= from %>
        to: <%= to %>
        smtp:
          addr: <%= addr %>
          <% if_p('registry.log.hooks.mail.smtp.username') do |username| %>
          username: <%= username %>
          <% end %>
          <% if_p('registry.log.hooks.mail.smtp.password') do |password| %>
          password: <%= password %>
          <% end %>
          <% if_p('registry.log.hooks.mail.smtp.insecure') do |insecure| %>
          insecure: <%= insecure %>
          <% end %>
    <% end %>

storage:
  <% if p('registry.storage.driver') == 'inmemory' %>
  inmemory:

  <% elsif p('registry.storage.driver') == 'filesystem' %>
  filesystem:
    rootdirectory: /var/vcap/store/registry
    <% if_p('registry.storage.filesystem.max_threads') do |max_threads| %>
    maxthreads: <%= max_threads %>
    <% end %>

  <% elsif p('registry.storage.driver') == 'azure' %>
  azure:
    accountname: <%= p('registry.storage.azure.account_name') %>
    accountkey: <%= p('registry.storage.azure.account_key') %>
    container: <%= p('registry.storage.azure.container') %>
    <% if_p('registry.storage.azure.realm') do |realm| %>
    realm: <%= realm %>
    <% end %>

  <% elsif p('registry.storage.driver') == 'gcs' %>
  gcs:
    bucket: <%= p('registry.storage.gcs.bucket') %>
    <% if_p('registry.storage.gcs.service_account_key') do %>
    keyfile: /var/vcap/jobs/registry/config/gcs_service_account_key.json
    <% end %>
    <% if_p('registry.storage.gcs.root_directory') do |root_directory| %>
    rootdirectory: <%= root_directory %>
    <% end %>
    <% if_p('registry.storage.gcs.chunksize') do |chunksize| %>
    chunksize: <%= chunksize %>
    <% end %>

  <% elsif p('registry.storage.driver') == 's3' %>
  s3:
    <% if_p('registry.storage.s3.access_key') do |access_key| %>
    accesskey: <%= access_key %>
    <% end %>
    <% if_p('registry.storage.s3.secret_key') do |secret_key| %>
    secretkey: <%= secret_key %>
    <% end %>
    region: <%= p('registry.storage.s3.region') %>
    <% if_p('registry.storage.s3.region_endpoint') do |region_endpoint| %>
    regionendpoint: <%= region_endpoint %>
    <% end %>
    bucket: <%= p('registry.storage.s3.bucket') %>
    <% if_p('registry.storage.s3.encrypt') do |encrypt| %>
    encrypt: <%= encrypt %>
    <% end %>
    <% if_p('registry.storage.s3.keyid') do |keyid| %>
    keyid: <%= keyid %>
    <% end %>
    <% if_p('registry.storage.s3.secure') do |secure| %>
    secure: <%= secure %>
    <% end %>
    <% if_p('registry.storage.s3.v4auth') do |v4auth| %>
    v4auth: <%= v4auth %>
    <% end %>
    <% if_p('registry.storage.s3.chunksize') do |chunksize| %>
    chunksize: <%= chunksize %>
    <% end %>
    <% if_p('registry.storage.s3.multipart_copy_chunksize') do |multipart_copy_chunksize| %>
    multipartcopychunksize: <%= multipart_copy_chunksize %>
    <% end %>
    <% if_p('registry.storage.s3.multipart_copy_max_concurrency') do |multipart_copy_max_concurrency| %>
    multipartcopymaxconcurrency: <%= multipart_copy_max_concurrency %>
    <% end %>
    <% if_p('registry.storage.s3.multipart_copy_threshold_size') do |multipart_copy_threshold_size| %>
    multipartcopythresholdsize: <%= multipart_copy_threshold_size %>
    <% end %>
    <% if_p('registry.storage.s3.root_directory') do |root_directory| %>
    rootdirectory: <%= root_directory %>
    <% end %>
    <% if_p('registry.storage.s3.storage_class') do |storage_class| %>
    storageclass: <%= storage_class %>
    <% end %>

  <% elsif p('registry.storage.driver') == 'swift' %>
  swift:
    username: <%= p('registry.storage.swift.username') %>
    password: <%= p('registry.storage.swift.password') %>
    authurl: <%= p('registry.storage.swift.auth_url') %>
    <% if_p('registry.storage.swift.tenant') do |tenant| %>
    tenant: <%= tenant %>
    <% end %>
    <% if_p('registry.storage.swift.tenant_id') do |tenant_id| %>
    tenantid: <%= tenant_id %>
    <% end %>
    <% if_p('registry.storage.swift.domain') do |domain| %>
    domain: <%= domain %>
    <% end %>
    <% if_p('registry.storage.swift.domain_id') do |domain_id| %>
    domainid: <%= domain_id %>
    <% end %>
    <% if_p('registry.storage.swift.trust_id') do |trust_id| %>
    trustid: <%= trust_id %>
    <% end %>
    <% if_p('registry.storage.swift.region') do |region| %>
    region: <%= region %>
    <% end %>
    <% if_p('registry.storage.swift.auth_version') do |auth_version| %>
    authversion: <%= auth_version %>
    <% end %>
    container: <%= p('registry.storage.swift.container') %>
    <% if_p('registry.storage.swift.prefix') do |prefix| %>
    prefix: <%= prefix %>
    <% end %>
    <% if_p('registry.storage.swift.endpoint_type') do |endpoint_type| %>
    endpointtype: <%= endpoint_type %>
    <% end %>
    <% if_p('registry.storage.swift.insecure_skip_verify') do |insecure_skip_verify| %>
    insecureskipverify: <%= insecure_skip_verify %>
    <% end %>
    <% if_p('registry.storage.swift.chunksize') do |chunksize| %>
    chunksize: <%= chunksize %>
    <% end %>
    <% if_p('registry.storage.swift.access_key') do |access_key| %>
    accesskey: <%= access_key %>
    <% end %>
    <% if_p('registry.storage.swift.secret_key') do |secret_key| %>
    secretkey: <%= secret_key %>
    <% end %>
    <% if_p('registry.storage.swift.tempurl_container_key') do |tempurl_container_key| %>
    tempurlcontainerkey: <%= tempurl_container_key %>
    <% end %>

  <% elsif p('registry.storage.driver') == 'oss' %>
  oss:
    accesskeyid: <%= p('registry.storage.oss.access_key_id') %>
    accesskeysecret: <%= p('registry.storage.oss.access_key_secret') %>
    region: <%= p('registry.storage.oss.region') %>
    <% if_p('registry.storage.oss.endpoint') do |endpoint| %>
    endpoint: <%= endpoint %>
    <% end %>
    <% if_p('registry.storage.oss.internal') do |internal| %>
    internal: <%= internal %>
    <% end %>
    bucket: <%= p('registry.storage.oss.bucket') %>
    <% if_p('registry.storage.oss.encrypt') do |encrypt| %>
    encrypt: <%= encrypt %>
    <% end %>
    <% if_p('registry.storage.oss.secure') do |secure| %>
    secure: <%= secure %>
    <% end %>
    <% if_p('registry.storage.oss.chunksize') do |chunksize| %>
    chunksize: <%= chunksize %>
    <% end %>
    <% if_p('registry.storage.oss.root_directory') do |root_directory| %>
    rootdirectory: <%= root_directory %>
    <% end %>
  <% else raise "Storage driver #{p('registry.storage.driver')} not supported" %>
  <% end %>

  cache:
    <% if_link('redis') do |redis| %>
    blobdescriptor: redis
    <% end.else do %>
    blobdescriptor: inmemory
    <% end %>

  delete:
    <% if_p('registry.storage.delete.enabled') do |enabled| %>
    enabled: <%= enabled %>
    <% end %>

  maintenance:
    <% if_p('registry.storage.maintenance.uploadpurging.enabled',
            'registry.storage.maintenance.uploadpurging.age',
            'registry.storage.maintenance.uploadpurging.interval',
            'registry.storage.maintenance.uploadpurging.dryrun') do |enabled, age, interval, dryrun| %>
    uploadpurging:
      enabled: <%= enabled %>
      age: <%= age %>
      interval: <%= interval %>
      dryrun: <%= dryrun %>
    <% end %>
    <% if_p('registry.storage.maintenance.readonly.enabled') do |enabled| %>
    readonly:  
      enabled: <%= enabled %>
    <% end %>
  
  <% if_p('registry.storage.redirect.disable') do |disable| %>
  redirect:
    disable: <%= disable %>
  <% end %>

auth:
  <% if_p('registry.auth.silly.realm', 'registry.auth.silly.service') do |realm, service| %>
  silly:
    realm: <%= realm %>
    service: <%= service %>
  <% end %>

  <% if_p('registry.auth.token.realm',
          'registry.auth.token.service',
          'registry.auth.token.issuer',
          'registry.auth.token.rootcertbundle') do |realm, service, issuer, rootcertbundle| %>
  token:
    realm: <%= realm %>
    service: <%= service %>
    issuer: <%= issuer %>
    rootcertbundle: /var/vcap/jobs/registry/config/rootcertbundle.pem
  <% end %>

  <% if_p('registry.auth.htpasswd.realm', 'registry.auth.htpasswd.htpasswd') do |realm, htpasswd| %>
  htpasswd:
    realm: <%= realm %>
    path: /var/vcap/jobs/registry/config/registry_htpasswd
  <% end %>

middleware:
  <% if_p('registry.middleware.cloudfront.base_url',
          'registry.middleware.cloudfront.private_key',
          'registry.middleware.cloudfront.keypair_id',
          'registry.middleware.cloudfront.duration') do |base_url, private_key, keypair_id, duration| %>
  storage:
    - name: cloudfront
      options:
        baseurl: <%= base_url %>
        privatekey: /var/vcap/jobs/registry/config/cloudfront_key.pem
        keypairid: <%= keypair_id %>
        duration: <%= duration %>
  <% end %>
  <% if_p('registry.middleware.redirect.base_url') do |base_url| %>
  storage:
    - name: redirect
      options:
        baseurl: <%= base_url %>
  <% end %>

reporting:
  <% if_p('registry.reporting.bugsnag.api_key') do |api_key| %>
  bugsnag:
    apikey: <%= api_key %>
    <% if_p('registry.reporting.bugsnag.release_stage') do |release_stage| %>
    releasestage: <%= release_stage %>
    <% end %>
    <% if_p('registry.reporting.bugsnag.endpoint') do |endpoint| %>
    endpoint: <%= endpoint %>
    <% end %>
  <% end %>
  <% if_p('registry.reporting.newrelic.license_key') do |license_key| %>
  newrelic:
    licensekey: <%= license_key %>
    <% if_p('registry.reporting.newrelic.name') do |name| %>
    name: <%= name %>
    <% end %>
    <% if_p('registry.reporting.newrelic.verbose') do |verbose| %>
    verbose: <%= verbose %>
    <% end %>
  <% end %>

http:
  net: <%= p('registry.http.net') %>
  <% if p('registry.http.net') == 'tcp' %>
  addr: <%= p('registry.http.listen_addr') %>:<%= p('registry.http.port') %>
  <% elsif p('registry.http.net') == 'unix' %>
  addr: /var/vcap/sys/run/registry/registry.sock
  <% else raise "HTTP net #{p('registry.http.net')} not supported" %>
  <% end %>
  <% if_p('registry.http.prefix') do |prefix| %>
  prefix: <%= prefix %>
  <% end %>
  <% if_p('registry.http.host') do |host| %>
  host: <%= host %>
  <% end %>
  <% if_p('registry.http.secret') do |secret| %>
  secret: <%= secret %>
  <% end %>
  <% if_p('registry.http.relative_urls') do |relative_urls| %>
  relativeurls: <%= relative_urls %>
  <% end %>
  tls:
    <% if_p('registry.http.tls.cert', 'registry.http.tls.key') do %>
    certificate: /var/vcap/jobs/registry/config/registry_tls_cert.pem
    key: /var/vcap/jobs/registry/config/registry_tls_key.pem
    <% if_p('registry.http.tls.ca') do %>
    clientcas:
      - /var/vcap/jobs/registry/config/registry_tls_ca.pem
    <% end %>
    <% end %>
    <% if_p('registry.http.tls.letsencrypt.email') do |email| %>
    letsencrypt:
      cachefile: /var/vcap/store/registry/letsencrypt.cachefile
      email: <%= email %>
    <% end %>
  <% if_p('registry.http.debug.listen_addr', 'registry.http.debug.port') do |listen_addr, port| %>
  debug:
    addr: <%= listen_addr %>:<%= port %>
  <% end %>
  headers:
    <% p('registry.http.headers', {}).each do |key, value| %>
    <%= key %>: <%= value %>
    <% end %>
  <% if_p('registry.http.http2.disabled') do |disabled| %>
  http2:
    disabled: <%= disabled %>
  <% end %>

notifications:
  <% if_p('registry.notifications.endpoint.name',
          'registry.notifications.endpoint.url') do |name, url| %>
  endpoints:
    - name: <%= name %>
      url: <%= url %>
      headers:
        <% p('registry.notifications.endpoint.headers', {}).each do |key, value| %>
        <%= key %>: <%= value %>
        <% end %>
      <% if_p('registry.notifications.endpoint.disabled') do |disabled| %>
      disabled: <%= disabled %>
      <% end %>
      <% if_p('registry.notifications.endpoint.timeout') do |timeout| %>
      timeout: <%= timeout %>
      <% end %>
      <% if_p('registry.notifications.endpoint.threshold') do |threshold| %>
      threshold: <%= threshold %>
      <% end %>
      <% if_p('registry.notifications.endpoint.backoff') do |backoff| %>
      backoff: <%= backoff %>
      <% end %>
      <% if_p('registry.notifications.endpoint.ignored_media_types') do |ignored_media_types| %>
      ignoredmediatypes: <%= ignored_media_types %>
      <% end %>
  <% end %>

redis:
<% if_link('redis') do |redis| %>
  addr: <%= redis.instances.first.address %>:<%= redis.p('redis.port') %>
  <% redis.if_p('redis.password') do |password| %>
  password: <%= password %>
  <% end %>
  <% if_p('registry.redis.db') do |db| %>
  db: <%= db %>
  <% end %>
  <% if_p('registry.redis.dial_timeout') do |dial_timeout| %>
  dialtimeout: <%= dial_timeout %>
  <% end %>
  <% if_p('registry.redis.read_timeout') do |read_timeout| %>
  readtimeout: <%= read_timeout %>
  <% end %>
  <% if_p('registry.redis.write_timeout') do |write_timeout| %>
  writetimeout: <%= write_timeout %>
  <% end %>
  pool:
    <% if_p('registry.redis.pool.max_idle') do |max_idle| %>
    maxidle: <%= max_idle %>
    <% end %>
    <% if_p('registry.redis.pool.max_active') do |max_active| %>
    maxactive: <%= max_active %>
    <% end %>
    <% if_p('registry.redis.pool.idle_timeout') do |idle_timeout| %>
    idletimeout: <%= idle_timeout %>
    <% end %>
<% end %>

health:
  <% if_p('registry.health.storagedriver.enabled') do |enabled| %>
  storagedriver:
    enabled: <%= enabled %>
    <% if_p('registry.health.storagedriver.interval') do |interval| %>
    interval: <%= interval %>
    <% end %>
    <% if_p('registry.health.storagedriver.threshold') do |threshold| %>
    threshold: <%= threshold %>
    <% end %>
  <% end %>
  http:
    <% if_p('registry.health.http.uri') do |uri| %>
    - uri: <%= uri %>
      headers:
        <% p('registry.health.http.headers', {}).each do |key, value| %>
        <%= key %>: <%= value %>
        <% end %>
      <% if_p('registry.health.http.status_code') do |status_code| %>
      statuscode: <%= status_code %>
      <% end %>
      <% if_p('registry.health.http.timeout') do |timeout| %>
      timeout: <%= timeout %>
      <% end %>
      <% if_p('registry.health.http.interval') do |interval| %>
      interval: <%= interval %>
      <% end %>
      <% if_p('registry.health.http.threshold') do |threshold| %>
      threshold: <%= threshold %>
      <% end %>
    <% end %>
  tcp:
    <% if_link('redis') do |redis| %>
    - addr: <%= redis.instances.first.address %>:<%= redis.p('redis.port') %>
      <% if_p('registry.health.redis.timeout') do |timeout| %>
      timeout: <%= timeout %>
      <% end %>
      <% if_p('registry.health.redis.interval') do |interval| %>
      interval: <%= interval %>
      <% end %>
      <% if_p('registry.health.redis.threshold') do |threshold| %>
      threshold: <%= threshold %>
      <% end %>
    <% end %>
    <% if_p('registry.health.tcp.addr') do |addr| %>
    - addr: <%= addr %>
      <% if_p('registry.health.tcp.timeout') do |timeout| %>
      timeout: <%= timeout %>
      <% end %>
      <% if_p('registry.health.tcp.interval') do |interval| %>
      interval: <%= interval %>
      <% end %>
      <% if_p('registry.health.tcp.threshold') do |threshold| %>
      threshold: <%= threshold %>
      <% end %>
    <% end %>

<% if_p('registry.proxy.remote_url') do |remote_url| %>
proxy:
  remoteurl: <%= remote_url %>
  <% if_p('registry.proxy.username') do |username| %>
  username: <%= username %>
  <% end %>
  <% if_p('registry.proxy.password') do |password| %>
  password: <%= password %>
  <% end %>
<% end %>

compatibility:
  <% if_p('registry.compatibility.schema1.signing_key') do %>
  schema1:
    signingkeyfile: /var/vcap/jobs/registry/config/schema1_signing_key.pem
  <% end %>

validation:
  <% if_p('registry.validation.enabled') do |enabled| %>
  enabled: <%= enabled %>
  <% if_p('registry.validation.manifests.allow_urls') do |allow_urls| %>
  manifests:
    urls:
      allow: <%= allow_urls %>
      <% if_p('registry.validation.manifests.deny_urls') do |deny_urls| %>
      deny: <%= deny_urls %>
      <% end %>
  <% end %>
  <% end %>
